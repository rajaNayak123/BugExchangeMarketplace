// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String  @db.String
  access_token      String  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  reputation    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  account     Account[]
  session     Session[]
  bugs        Bug[]
  submissions Submission[]
  payments    Payment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bug {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  stackTrace   String?
  repoSnippet  String?
  bountyAmount Float
  tags         String[]
  status       BugStatus @default(OPEN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  submissions Submission[]
  payments    Payment[]

  @@map("bugs")
}

model Submission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  description String
  solution    String
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  bugId String @db.ObjectId
  bug   Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  submitterId String @db.ObjectId
  submitter   User   @relation(fields: [submitterId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Payment {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  razorpayOrderId   String        @unique
  razorpayPaymentId String?
  amount            Float
  status            PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  bugId String @db.ObjectId
  bug   Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum BugStatus {
  OPEN
  CLAIMED
  RESOLVED
  CLOSED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
