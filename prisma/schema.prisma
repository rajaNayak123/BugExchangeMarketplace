// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String  @db.String
  access_token      String  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  reputation    Int       @default(0)
  expertise     String[]  @default([]) // Areas of expertise for auto-assignment
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  account        Account[]
  session        Session[]
  bugs           Bug[]
  assignedBugs   Bug[]                     @relation("BugAssignee") // Bugs assigned to this user
  submissions    Submission[]
  payments       Payment[]
  comments       Comment[]
  notifications  Notification[]
  conversations  ConversationParticipant[]
  messages       Message[]
  attachments    Attachment[]
  bugTransitions BugTransition[] // Track bug lifecycle changes

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bug {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  stackTrace      String?
  repoSnippet     String?
  bountyAmount    Float
  tags            String[]
  status          BugStatus   @default(OPEN)
  category        BugCategory @default(FUNCTIONALITY)
  priority        BugPriority @default(MEDIUM)
  severity        BugSeverity @default(MODERATE)
  duplicateOfId   String?     @db.ObjectId // Reference to original bug if this is a duplicate
  similarityScore Float? // Similarity score for duplication detection
  originalBug     Bug?        @relation("BugDuplicates", fields: [duplicateOfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  assignedToId String? @db.ObjectId
  assignedTo   User?   @relation("BugAssignee", fields: [assignedToId], references: [id])

  templateId String?      @db.ObjectId
  template   BugTemplate? @relation(fields: [templateId], references: [id])

  submissions Submission[]
  payments    Payment[]
  comments    Comment[]
  transitions BugTransition[] // Bug lifecycle history
  duplicates  Bug[]           @relation("BugDuplicates") // Bugs that are duplicates of this one

  @@map("bugs")
}

model Submission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  description String
  solution    String
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  bugId String @db.ObjectId
  bug   Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  submitterId String @db.ObjectId
  submitter   User   @relation(fields: [submitterId], references: [id], onDelete: Cascade)

  comments    Comment[]
  attachments Attachment[]

  @@map("submissions")
}

model Payment {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  razorpayOrderId   String        @unique
  razorpayPaymentId String?
  amount            Float
  status            PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  bugId String @db.ObjectId
  bug   Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Comment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  authorId     String   @db.ObjectId
  bugId        String?  @db.ObjectId
  submissionId String?  @db.ObjectId
  parentId     String?  @db.ObjectId
  mentions     String[] // Array of mentioned user IDs
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bug        Bug?        @relation(fields: [bugId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  parent     Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[]   @relation("CommentReplies")

  @@map("comments")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      String? // JSON string for additional data
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  userId         String   @db.ObjectId
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  content        String
  attachments    String[] // Array of attachment URLs
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  submissionId String   @db.ObjectId
  uploadedById String   @db.ObjectId
  createdAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  uploadedBy User       @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model BugTemplate {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  category    BugCategory
  priority    BugPriority
  severity    BugSeverity
  tags        String[]
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  bugs Bug[]

  @@map("bug_templates")
}

model BugTransition {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  bugId        String     @db.ObjectId
  fromStatus   BugStatus?
  toStatus     BugStatus
  assignedToId String?    @db.ObjectId
  notes        String?
  createdAt    DateTime   @default(now())

  bug        Bug   @relation(fields: [bugId], references: [id], onDelete: Cascade)
  assignedTo User? @relation(fields: [assignedToId], references: [id])

  @@map("bug_transitions")
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  CLAIMED
  UNDER_REVIEW
  RESOLVED
  VERIFIED
  CLOSED
  REOPENED
  DUPLICATE
}

enum BugCategory {
  SECURITY
  PERFORMANCE
  UI_UX
  FUNCTIONALITY
  ACCESSIBILITY
  COMPATIBILITY
  DOCUMENTATION
  OTHER
}

enum BugPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugSeverity {
  MINOR
  MODERATE
  MAJOR
  BLOCKER
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  COMMENT
  MENTION
  BUG_STATUS_CHANGE
  SUBMISSION_STATUS_CHANGE
  NEW_MESSAGE
  BUG_ASSIGNED
}
